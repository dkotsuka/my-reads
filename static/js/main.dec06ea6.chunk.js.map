{"version":3,"sources":["BooksAPI.js","BookList.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","BookList","props","react_default","a","createElement","className","shelfTitle","books","map","index","key","style","width","height","backgroundImage","imageLinks","thumbnail","value","onChange","event","onChangeShelf","target","disabled","title","authors","BooksApp","state","currentlyReading","wantToRead","read","showSearchPage","changeShelf","BooksAPI","_this","setState","filter","b","push","_this2","this","data","_this3","onClick","type","placeholder","src_BookList","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.dec06ea6.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React from 'react'\r\n\r\nfunction BookList(props) {\r\n\treturn (\r\n\t\t<div className=\"bookshelf\">\r\n\t        <h2 className=\"bookshelf-title\">{props.shelfTitle}</h2>\r\n\t        <div className=\"bookshelf-books\">\r\n\t\t\t\t<ol className=\"books-grid\">\r\n\t\t\t\t\t{props.books.map((book, index) => (\r\n\t\t\t\t\t\t<li key={book.id}>\r\n\t\t\t                <div className=\"book\">\r\n\t\t\t\t\t\t\t\t<div className=\"book-top\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"book-cover\" style={\r\n\t\t\t\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\t\t\twidth: 128, height: 193, \r\n\t\t\t\t\t\t\t\t\t\t\tbackgroundImage: `url(${book.imageLinks.thumbnail})`\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}></div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"book-shelf-changer\">\r\n\t\t\t\t\t\t\t\t\t\t<select value={book.shelf} onChange={(event) => props.onChangeShelf(book, event.target.value)}>\r\n\t\t\t\t\t\t\t\t\t\t    <option value=\"move\" disabled>Move to...</option>\r\n\t\t\t\t\t\t\t\t\t\t    <option value=\"currentlyReading\">Currently Reading</option>\r\n\t\t\t\t\t\t\t\t\t\t    <option value=\"wantToRead\">Want to Read</option>\r\n\t\t\t\t\t\t\t\t\t\t    <option value=\"read\">Read</option>\r\n\t\t\t\t\t\t\t\t\t\t    <option value=\"none\">None</option>\r\n\t\t\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t                \t<div className=\"book-title\">{book.title}</div>\r\n\t\t\t                \t<div className=\"book-authors\">{book.authors}</div>\r\n\t\t\t                </div>\r\n\t\t\t            </li>\r\n\t\t\t\t\t))}\r\n\t            </ol>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default BookList","import React from 'react'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport BookList from './BookList'\r\n\r\nclass BooksApp extends React.Component {\r\n  state = {\r\n    currentlyReading: [],\r\n    wantToRead: [],\r\n    read: [],\r\n    /**\r\n     * TODO: Instead of using this state variable to keep track of which page\r\n     * we're on, use the URL in the browser's address bar. This will ensure that\r\n     * users can use the browser's back and forward buttons to navigate between\r\n     * pages, as well as provide a good URL they can bookmark and share.\r\n     */\r\n    showSearchPage: false\r\n  }\r\n\r\n  componentDidMount(){\r\n    BooksAPI.getAll().then(books => books.map((book) => {\r\n      this.setState(state => state[book.shelf].push(book))\r\n    }))\r\n  }\r\n\r\n  changeShelf = (book, shelf) => {\r\n    BooksAPI.update(book,shelf).then(() => {\r\n        this.setState(state => {state[book.shelf].filter((b) => b.id !== book.id)})\r\n        this.setState(state => {state[shelf].push(book)})\r\n    })\r\n  }\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <div className=\"app\">\r\n        {this.state.showSearchPage ? (\r\n          <div className=\"search-books\">\r\n            <div className=\"search-books-bar\">\r\n              <button className=\"close-search\" onClick={() => this.setState({ showSearchPage: false })}>Close</button>\r\n              <div className=\"search-books-input-wrapper\">\r\n                {/*\r\n                  NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n                  You can find these search terms here:\r\n                  https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n                  However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n                  you don't find a specific author or title. Every search is limited by search terms.\r\n                */}\r\n                <input type=\"text\" placeholder=\"Search by title or author\"/>\r\n\r\n              </div>\r\n            </div>\r\n            <div className=\"search-books-results\">\r\n              <ol className=\"books-grid\"></ol>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"list-books\">\r\n\r\n            <div className=\"list-books-title\">\r\n              <h1>MyReads</h1>\r\n            </div>\r\n\r\n            <div className=\"list-books-content\">\r\n              <div>\r\n                <BookList books={this.state.currentlyReading} \r\n                  shelfTitle='Currently Reading' \r\n                  onChangeShelf={this.changeShelf}/>\r\n\r\n                <BookList books={this.state.wantToRead} \r\n                  shelfTitle='Want to Read' \r\n                  onChangeShelf={this.changeShelf}/>\r\n\r\n                <BookList books={this.state.read} \r\n                  shelfTitle='Read' \r\n                  onChangeShelf={this.changeShelf}/>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"open-search\">\r\n              <button onClick={() => this.setState({ showSearchPage: true })}>Add a book</button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BooksApp\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}