{"version":3,"sources":["BooksAPI.js","Book.js","SeachView.js","BookShelf.js","ShelfView.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","data","books","Book","props","react_default","a","createElement","key","className","style","width","height","backgroundImage","imageLinks","thumbnail","value","onChange","event","onChangeShelf","target","disabled","title","authors","SeachView","state","result","isEmpty","message","updateQuery","BooksAPI","map","push","_this","setState","catch","changeShelf","_this2","this","Link","to","type","placeholder","src_Book","Component","BookShelf","shelfTitle","length","ShelfView","currentlyReading","wantToRead","read","newState","movingBook","filter","b","src_BookShelf","onClick","onSearchClick","BooksApp","Route","exact","path","render","_ref","history","src_ShelfView","src_SeachView","React","ReactDOM","BrowserRouter","basename","process","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.021ef964.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React from 'react'\r\n\r\nfunction Book(props) {\r\n\tconst book = props.book\r\n\treturn (\t\t\t\t\t\t\r\n\t\t<li key={book.id}>\r\n\t\t\t<div className=\"book\">\r\n\t\t\t\t<div className=\"book-top\">\r\n\t\t\t\t\t<div className=\"book-cover\" style={\r\n\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\twidth: 128, height: 193, \r\n\t\t\t\t\t\t\tbackgroundImage: `url(${book.imageLinks.thumbnail})`\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}></div>\r\n\t\t\t\t\t<div className=\"book-shelf-changer\">\r\n\t\t\t\t\t\t<select value={book.shelf} \r\n\t\t\t\t\t\t\tonChange={(event) => props.onChangeShelf(book, event.target.value)}>\r\n\r\n\t\t\t\t\t\t\t<option value=\"move\" disabled>Move to...</option>\r\n\t\t\t\t\t\t\t<option value=\"currentlyReading\">Currently Reading</option>\r\n\t\t\t\t\t\t\t<option value=\"wantToRead\">Want to Read</option>\r\n\t\t\t\t\t\t\t<option value=\"read\">Read</option>\r\n\t\t\t\t\t\t\t<option value=\"none\">None</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t    <div className=\"book-title\">{book.title}</div>\r\n\t\t\t    <div className=\"book-authors\">{book.authors}</div>\r\n\t\t\t</div>\r\n\t\t</li>\r\n\t)\r\n}\r\n\r\nexport default Book","import React, {Component} from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport Book from './Book'\r\n\r\nclass SeachView extends Component{\r\n\tstate = {\r\n\t\tresult: [],\r\n\t\tisEmpty: true,\r\n\t\tmessage: 'Empty search'\r\n\t}\r\n\r\n\tupdateQuery = (query) => {\r\n\t\tif(query){\r\n\t\t\tconst result = []\r\n\t\t\tBooksAPI.search(query).then((books) => {\r\n\t\t\t\tbooks.map(\r\n\t\t\t\t\tbook => result.push(book)\r\n\t\t\t\t)\r\n\t\t\t\tthis.setState({result, isEmpty: false})\r\n\t\t\t}).catch(() => this.setState({result: [], isEmpty: true, message: 'No results found!'}))\r\n\t\t}else{\r\n\t\t\tthis.setState({result: [], isEmpty: true})\r\n\t\t}\r\n\t}\r\n\r\n\tchangeShelf = (book, shelf) => {\r\n\t\tBooksAPI.update(book,shelf)\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"search-books\">\r\n\t            <div className=\"search-books-bar\">\r\n\t            <Link to='/' className='close-search'>Close</Link>\r\n\t            \t<div className=\"search-books-input-wrapper\">\r\n\t\t                {/*\r\n\t\t                  NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n\t\t                  You can find these search terms here:\r\n\t\t                  https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n\t\t                  However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n\t\t                  you don't find a specific author or title. Every search is limited by search terms.\r\n\t\t                */}\r\n\t\t                <input type=\"text\" \r\n\t\t                \tplaceholder=\"Search by title or author\"\r\n\t\t\t\t\t\t\tonChange={(event) => this.updateQuery(event.target.value)}/>\r\n\r\n\t            \t</div>\r\n\t            </div>\r\n\t            <div className=\"search-books-results\">\r\n\t            \t{!this.state.isEmpty ? (\r\n\t            \t\t<ol className=\"books-grid\">{\r\n\t\t\t              \tthis.state.result.map((book) => (\r\n\t\t\t              \t\t<Book book={book}\r\n\t\t\t\t\t\t\t\t\tkey={book.id}\r\n\t\t\t\t\t\t\t\t\tonChangeShelf={this.changeShelf}/>\r\n\t\t\t              \t))\r\n\t\t              \t}</ol>\r\n\t              \t) : (<div className='empty-result'><p>{this.state.message}</p></div>)}\r\n\t            \t\r\n\t            </div>\r\n        \t</div>\r\n        )\r\n\t}\r\n}\r\n\r\nexport default SeachView","import React from 'react'\r\nimport Book from './Book'\r\n\r\nfunction BookShelf(props) {\r\n\treturn (\r\n\t\t<div className=\"bookshelf\">\r\n\t        <h2 className=\"bookshelf-title\">{props.shelfTitle} ({props.books.length})</h2>\r\n\t        <div className=\"bookshelf-books\">\r\n\t\t\t\t<ol className=\"books-grid\">\r\n\t\t\t\t\t{props.books.map((book) => (\r\n\t\t\t\t\t\t<Book book={book}\r\n\t\t\t\t\t\t\tkey={book.id}\r\n\t\t\t\t\t\t\tonChangeShelf={props.onChangeShelf}/>\r\n\t\t\t\t\t))}\r\n\t            </ol>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default BookShelf","import React, {Component} from 'react'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport BookShelf from './BookShelf'\r\n\r\nclass ShelfView extends Component{\r\n\tstate = {\r\n\t\tcurrentlyReading: [],\r\n\t\twantToRead: [],\r\n\t\tread: []\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tBooksAPI.getAll().then((books) => {\r\n\t\t  const newState = this.state\r\n\t\t  books.map((book) => {newState[book.shelf].push(book)})\r\n\t\t  this.setState(newState)\r\n\t\t})\r\n\t}\r\n\r\n\tchangeShelf = (book, shelf) => {\r\n\t    const newState = this.state\r\n\t    const movingBook = book\r\n\t    \r\n\t    if(book.shelf !== shelf){\r\n\t\t\tnewState[book.shelf] = newState[book.shelf].filter(b => b.id !== book.id)\r\n\t\t\tif(shelf !== 'none'){\r\n\t\t\t\tmovingBook.shelf = shelf\r\n\t\t\t\tnewState[shelf].push(movingBook)\r\n\t\t\t}\r\n\t    }\r\n\t    this.setState(newState)\r\n\t    BooksAPI.update(book,shelf)\r\n  \t}\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"list-books\">\r\n\t            <div className=\"list-books-title\">\r\n\t              <h1>MyReads</h1>\r\n\t            </div>\r\n\r\n\t            <div className=\"list-books-content\">\r\n\t              <div>\r\n\t                <BookShelf books={this.state.currentlyReading} \r\n\t                  shelfTitle='Currently Reading' \r\n\t                  onChangeShelf={this.changeShelf}/>\r\n\r\n\t                <BookShelf books={this.state.wantToRead} \r\n\t                  shelfTitle='Want to Read' \r\n\t                  onChangeShelf={this.changeShelf}/>\r\n\r\n\t                <BookShelf books={this.state.read} \r\n\t                  shelfTitle='Read' \r\n\t                  onChangeShelf={this.changeShelf}/>\r\n\t              </div>\r\n\t            </div>\r\n\r\n\t            <div className=\"open-search\">\r\n\t              <button onClick={this.props.onSearchClick}>Add a book</button>\r\n\t            </div>\r\n\t        </div>\r\n        )\r\n\t}\r\n}\r\n\r\nexport default ShelfView","import React from 'react'\r\nimport './App.css'\r\nimport SeachView from './SeachView'\r\nimport ShelfView from './ShelfView'\r\nimport { Route } from 'react-router-dom'\r\n\r\nclass BooksApp extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n\r\n        <Route exact path={'/'} render={({history}) => (\r\n          <ShelfView onSearchClick={() => history.push('/search')}/>\r\n        )}/>\r\n\r\n        <Route exact path={'/search'} render={() => (\r\n          <SeachView />\r\n        )}/>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default BooksApp","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport './index.css'\r\n\r\nReactDOM.render(<BrowserRouter basename={process.env.PUBLIC_URL}><App /></BrowserRouter>, document.getElementById('root'))\r\n"],"sourceRoot":""}